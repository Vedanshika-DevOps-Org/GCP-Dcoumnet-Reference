# üîê Modernizing GCP Authentication: From Service Account Keys to Workload Identity Federation

---

## 1. Traditional Authentication with Service Account Keys

Traditionally, authentication to Google Cloud is done using **Service Accounts** and their corresponding **key files (JSON)**.

### üìå Steps:
1. Create a **Service Account** in Google Cloud.
2. Generate a **Service Account Key** (a JSON file).
3. Assign required IAM roles (e.g., `Storage Admin`, `Kubernetes Admin`, etc.).
4. Use the key in your CI/CD tools (e.g., **GitHub Actions**), typically by storing it in **GitHub Secrets**.

---

## 2. Why This Approach Is Dangerous

> ‚ö†Ô∏è **Service account keys are extremely dangerous.**

If the key is compromised:
- It may be very difficult to control or revoke it.
- It might be accidentally stored on:
  - A developer‚Äôs **local desktop**.
  - **GitHub Secrets** or even in the repository itself ‚Äî which is **even more dangerous**.

If leaked, the attacker gets long-term access to your GCP environment.

---

## 3. A Better Way: Workload Identity Federation (WIF)

To avoid the risks of long-lived credentials, the **recommended** and modern alternative is:

### ‚úÖ Workload Identity Federation (WIF)

WIF allows **secure authentication from external platforms (like GitHub)** into **Google Cloud**, using **short-lived tokens** that:
- Are generated **only when needed**
- Expire automatically after a short time
- **Don't require key files or secrets**

---

## 4. How Short-Lived Credentials Work

WIF uses **OIDC (OpenID Connect)** to authenticate.

### üîÑ Flow:
1. GitHub Action starts.
2. GitHub generates a one-time **OIDC token**.
3. GitHub sends this token to **Google Cloud‚Äôs token exchange endpoint**.
4. GCP validates the token against your **Workload Identity Provider (WIP)**.
5. If valid, GCP issues a **short-lived access token**.
6. GitHub Action uses this token to access GCP APIs securely.
7. The token **expires after 1 hour** (or less) ‚Äî **nothing is stored or reused**.

---

## 5. Old Method vs WIF (Side-by-Side)

| Aspect                    | Traditional (Keys)                            | Modern (WIF)                                |
|--------------------------|-----------------------------------------------|---------------------------------------------|
| Type                     | Long-lived JSON key                           | Short-lived OIDC token                      |
| Storage                  | Needs to be stored in GitHub secrets          | No storage needed                           |
| Security Risk            | High (if leaked, attacker has full access)    | Low (auto-expiring token)                   |
| Rotation                 | Manual key rotation needed                    | Not needed                                  |
| Best For                 | Legacy pipelines                              | Modern CI/CD (GitHub, GitLab, etc.)         |

---

## 6. GitHub Action Example (Using WIF)

```yaml
name: Deploy to GCP using WIF

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/github"
          service_account: "my-sa@gcp-project.iam.gserviceaccount.com"

      - name: List GCS Buckets
        run: gcloud storage buckets list
